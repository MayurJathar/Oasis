import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class ATMInterface {
    private static List<Transaction> transactions = new ArrayList<>();
    private static double balance = 0;
    private static boolean loggedIn = false;
    private static String userId = "1234";
    private static String userPin = "5678";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        login(scanner);

        if (loggedIn) {
            System.out.println("Login successful!");
            showMenu(scanner);
        } else {
            System.out.println("Login failed. Exiting...");
        }
    }

    private static void login(Scanner scanner) {
        System.out.print("Enter User ID: ");
        String enteredId = scanner.nextLine();
        System.out.print("Enter User PIN: ");
        String enteredPin = scanner.nextLine();

        if (enteredId.equals(userId) && enteredPin.equals(userPin)) {
            loggedIn = true;
        }
    }

    private static void showMenu(Scanner scanner) {
        int choice = 0;

        while (choice != 5) {
            System.out.println("\nATM Menu");
            System.out.println("1. View Transactions History");
            System.out.println("2. Withdraw Money");
            System.out.println("3. Deposit Money");
            System.out.println("4. Transfer Money");
            System.out.println("5. Quit");

            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    viewTransactionHistory();
                    break;
                case 2:
                    withdrawMoney(scanner);
                    break;
                case 3:
                    depositMoney(scanner);
                    break;
                case 4:
                    transferMoney(scanner);
                    break;
                case 5:
                    System.out.println("Quitting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
    }

    private static void viewTransactionHistory() {
        System.out.println("\nTransaction History:");
        for (Transaction transaction : transactions) {
            System.out.println(transaction);
        }
    }

    private static void withdrawMoney(Scanner scanner) {
        System.out.print("Enter the amount to withdraw: ");
        double amount = scanner.nextDouble();

        if (amount > 0 && amount <= balance) {
            balance -= amount;
            transactions.add(new Transaction("Withdraw", amount));
            System.out.println("Successfully withdrawn $" + amount);
            System.out.println("Current balance: $" + balance);
        } else {
            System.out.println("Invalid amount or insufficient balance.");
        }
    }

    private static void depositMoney(Scanner scanner) {
        System.out.print("Enter the amount to deposit: ");
        double amount = scanner.nextDouble();

        if (amount > 0) {
            balance += amount;
            transactions.add(new Transaction("Deposit", amount));
            System.out.println("Successfully deposited $" + amount);
            System.out.println("Current balance: $" + balance);
        } else {
            System.out.println("Invalid amount.");
        }
    }

    private static void transferMoney(Scanner scanner) {
        System.out.print("Enter the amount to transfer: ");
        double amount = scanner.nextDouble();

        if (amount > 0 && amount <= balance) {
            System.out.print("Enter the recipient's account number: ");
            String accountNumber = scanner.next();

            // Simulating transfer by deducting the amount from the balance
            balance -= amount;
            transactions.add(new Transaction("Transfer to " + accountNumber, amount));
            System.out.println("Successfully transferred $" + amount + " to account number " + accountNumber);
            System.out.println("Current balance: $" + balance);
        } else {
            System.out.println("Invalid amount or insufficient balance.");
        }
    }
}

class Transaction {
    private String type;
    private double amount;

    public Transaction(String type, double amount) {
        this.type = type;
        this.amount = amount;
    }

    @Override
    public String toString() {
        return "Type: " + type + ", Amount: $" + amount;
    }
}